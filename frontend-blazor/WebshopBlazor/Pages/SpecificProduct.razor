@page "/SpecificProduct/{Id:int}"
@using WebshopBlazor.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="row container-fluid my-5">
    
    <!-- left section (images) -->
    <div class="col-6 p-5">
        
        <!-- head image -->
        <div class="border-1 border-dark border rounded">
            <img src="@product.Image" class="img-fluid h-auto my-3" style="min-height: 300px" alt="Head image of product"/>
        </div>
        
        <!-- alt images -->
        <div class="my-3 mx-1 d-flex flex-row justify-content-around">
            <div class="col-2 border-1 border-dark border rounded">
                <img src="product.img" class="img-fluid h-auto" style="min-height: 100px" alt="Alt img of product"/>
            </div>
            <div class="col-2 border-1 border-dark border rounded">
                <img src="product.img" class="img-fluid h-auto" style="min-height: 100px" alt="Alt img of product"/>
            </div>
            <div class="col-2 border-1 border-dark border rounded">
                <img src="product.img" class="img-fluid h-auto" style="min-height: 100px" alt="Alt img of product"/>
            </div>
            <div class="col-2 border-1 border-dark border rounded">
                <img src="product.img" class="img-fluid h-auto" style="min-height: 100px" alt="Alt img of product"/>
            </div>
        </div>
        
    </div>
    
    <!-- right section (information) -->
    <div class="col-6 p-5">

        <!-- product name section-->
        <div class="my-3">
            <h1>@product.Name</h1>
        </div>

        <!-- product price section-->
        <div class="my-3">
            <h3>$@product.Price</h3>
        </div>

        <!-- product add to cart section-->
        <div class="my-3">
            <button class="btn btn-primary" @onclick:stopPropagation="true" @onclick="AddToCart">
                Add to Cart
            </button>
        </div>
        
        <!-- product description section-->
        <div class="my-3">
            <p>
                @product.Description
            </p>
        </div>
        
    </div>
    
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Product product = new();
    private List<CartItem> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        await LoadCartItems();
    }

    private async Task LoadProduct()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            product = await http.GetFromJsonAsync<Product>($"/products/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private async Task LoadCartItems()
    {
        var storedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cartItems");
        cartItems = storedCart ?? new List<CartItem>();
    }

    private async Task AddToCart()
    {
        Console.WriteLine($"Adding product {product.Id} to cart.");

        // Check if product already exists in the cart
        var existingItem = cartItems.FirstOrDefault(item => item.Id == product.Id);
        if (existingItem != null)
        {
            // Increment quantity
            existingItem.Quantity++;
        }
        else
        {
            // Add new item to cart
            cartItems.Add(new CartItem
            {
                Id = product.Id,
                Name = product.Name,
                Price = (decimal)product.Price,
                Quantity = 1
            });
        }

        // Save updated cart to local storage
        await LocalStorage.SetItemAsync("cartItems", cartItems);
    }

    public class Product
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public double Price { get; set; }
        public int StockQuantity { get; set; }
        public string Description { get; set; }
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
