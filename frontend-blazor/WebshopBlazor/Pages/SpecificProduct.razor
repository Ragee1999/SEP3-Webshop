@page "/SpecificProduct/{Id:int}"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap" rel="stylesheet">

<style>
    
    body {
        font-family: 'Lato', sans-serif;
        background-color: #f9f9f9;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h1, h3 {
        font-weight: 700;
        color: #007bff;
    }

    p {
        font-weight: 300;
        font-size: 1rem;
        color: #555;
        line-height: 1.6;
    }

    /* Left Section Styling (Product Image) */
    .product-image {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .product-image img {
        border-radius: 8px;
        max-height: 100%;
        object-fit: contain;
    }

    /* Right Section Styling (Product Details) */
    .product-details {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .btn {
        font-family: 'Lato', sans-serif;
        font-weight: 400;
        padding: 10px 20px;
        border-radius: 50px;
        text-transform: uppercase;
        transition: all 0.3s ease-in-out;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-primary.ms-3 {
        margin-left: 10px;
    }

    /* Alert Styling */
    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border-radius: 8px;
        padding: 10px;
    }

    /* Layout Adjustments */
    .container-fluid {
        max-width: 1200px;
        margin: 0 auto;
    }
    

        .product-image,
        .product-details {
            margin-bottom: 20px;
        }
</style>


<div class="row container-fluid my-5">
    <!-- Left Section (Product Image) -->
    <div class="col-6 product-image p-4">
        <div>
            <img src="@product.Image" class="img-fluid my-3" alt="Product Image" />
        </div>
    </div>

    <!-- Right Section (Product Details) -->
    <div class="col-6 product-details p-4">
        <!-- Product Name -->
        <div class="my-3">
            <h1>@product.Name</h1>
        </div>

        <!-- Product Price -->
        <div class="my-3">
            <h3>@product.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("da-DK"))</h3>
        </div>

        <!-- Add to Cart and Return Buttons -->
        <div class="my-3 d-flex align-items-center">
            <button class="btn btn-primary" @onclick="AddToCart">
                Add to Cart
            </button>
            <button class="btn btn-primary ms-3" @onclick="ReturnToProductPage">
                Return
            </button>
        </div>

        <!-- Feedback Message -->
        @if (isProductAdded)
        {
            <div class="alert alert-success mt-3">
                <strong>Product has been added to your cart.</strong>
            </div>
        }

        <!-- Product Description -->
        <div class="my-3">
            <p>@product.Description</p>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Product product = new();
    private List<CartItem> cartItems = new();
    private bool isProductAdded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        await LoadCartItems();
    }

    private async Task LoadProduct()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            product = await http.GetFromJsonAsync<Product>($"/products/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private async Task LoadCartItems()
    {
        var storedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cartItems");
        cartItems = storedCart ?? new List<CartItem>();
    }

    private async Task AddToCart()
    {
        var existingItem = cartItems.FirstOrDefault(item => item.Id == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            cartItems.Add(new CartItem
            {
                Id = product.Id,
                Name = product.Name,
                Price = (decimal)product.Price,
                Quantity = 1
            });
        }

        await LocalStorage.SetItemAsync("cartItems", cartItems);
        isProductAdded = true;
        StateHasChanged();
        await Task.Delay(2000);
        isProductAdded = false;
    }

    private void ReturnToProductPage()
    {
        NavigationManager.NavigateTo("/products");
    }

    public class Product
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public double Price { get; set; }
        public string Description { get; set; }
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
