@page "/SpecificProduct/{Id:int}"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="row container-fluid my-5">
    <!-- left section (images) -->
    <div class="col-6 p-5">
        <div class="border-1 border-dark border rounded">
            <img src="@product.Image" class="img-fluid h-auto my-3" style="min-height: 300px" alt="Head image of product"/>
        </div>
    </div>

    <!-- right section (information) -->
    <div class="col-6 p-5">
        <div class="my-3">
            <h1>@product.Name</h1>
        </div>
        <div class="my-3">
            <h3>$@product.Price</h3>
        </div>

        <!-- Add to Cart and Return Buttons (in a flex container for alignment) -->
        <div class="my-3 d-flex justify-content-start">
            <button class="btn btn-primary" @onclick="AddToCart">
                Add to Cart
            </button>
            <!-- Return Button on the right -->
            <button class="btn btn-primary ms-3" @onclick="ReturnToProductPage">
                Return
            </button>
        </div>

        <!-- Feedback Message when Add to Cart is clicked -->
        @if (isProductAdded)
        {
            <div class="alert alert-success mt-3">
                <strong>Product has been added to your cart.</strong> 
            </div>
        }

        <div class="my-3">
            <p>@product.Description</p>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Product product = new();
    private List<CartItem> cartItems = new();
    private bool isProductAdded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        await LoadCartItems();
    }

    private async Task LoadProduct()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            product = await http.GetFromJsonAsync<Product>($"/products/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private async Task LoadCartItems()
    {
        var storedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cartItems");
        cartItems = storedCart ?? new List<CartItem>();
    }

    private async Task AddToCart()
    {
        Console.WriteLine($"Adding product {product.Id} to cart.");

        var existingItem = cartItems.FirstOrDefault(item => item.Id == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            cartItems.Add(new CartItem
            {
                Id = product.Id,
                Name = product.Name,
                Price = (decimal)product.Price,
                Quantity = 1
            });
        }

        // Save updated cart to local storage
        await LocalStorage.SetItemAsync("cartItems", cartItems);

        // Show the success message
        isProductAdded = true;

        // small delay before hiding the message 
        StateHasChanged();  
        await Task.Delay(2000); // 2seconds
        isProductAdded = false;
    }

    private void ReturnToProductPage()
    {
        NavigationManager.NavigateTo("/products"); // Navigate back to Products page
    }

    public class Product
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public double Price { get; set; }
        public string Description { get; set; }
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
