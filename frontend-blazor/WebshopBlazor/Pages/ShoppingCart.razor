@page "/Cart"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

<h3>Shopping Cart</h3>

@if (cartItems.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Price</td>
                    <td>
                        <input type="number" value="@item.Quantity" min="1" @onchange="(e) => UpdateQuantity(item, int.Parse(e.Value.ToString()))" />
                    </td>
                    <td>@(item.Price * item.Quantity)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item.Id)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3"><strong>Total</strong></td>
                <td colspan="2">@cartTotal</td>
            </tr>
        </tfoot>
    </table>

    <button class="btn btn-secondary" @onclick="ClearCart">Clear Cart</button>
    <button class="btn btn-success" @onclick="Checkout">Checkout</button>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private List<CartItem> cartItems = new();
    private decimal cartTotal;

    protected override async Task OnInitializedAsync()
    {
        // Load cart items from local storage
        var storedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cartItems");
        cartItems = storedCart ?? new List<CartItem>();
        UpdateCartTotal();
    }

    private void UpdateCartTotal()
    {
        cartTotal = cartItems.Sum(item => item.Price * item.Quantity);
    }

    private void UpdateQuantity(CartItem item, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            RemoveFromCart(item.Id);
        }
        else
        {
            item.Quantity = newQuantity;
            SaveCartToLocalStorage();
            UpdateCartTotal();
        }
    }

    private void RemoveFromCart(long productId)
    {
        var item = cartItems.FirstOrDefault(i => i.Id == productId);
        if (item != null)
        {
            cartItems.Remove(item);
            SaveCartToLocalStorage();
            UpdateCartTotal();
        }
    }

    private void ClearCart()
    {
        cartItems.Clear();
        SaveCartToLocalStorage();
        UpdateCartTotal();
    }

    private async Task SaveCartToLocalStorage()
    {
        await LocalStorage.SetItemAsync("cartItems", cartItems);
    }

    // at this moment we just clear the checkout, since daniel needs to add stripe integration
    private async Task Checkout()
    {
      
        await LocalStorage.RemoveItemAsync("cartItems");
        cartItems.Clear();
        UpdateCartTotal();
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
