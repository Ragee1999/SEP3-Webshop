@page "/Cart"
<h3>Cart</h3>

<table class="table">
    <thead>
    <tr>
        <th>Product Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Total</th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in cartItems)
    {
        <tr>
            <td>@item.Name</td>
            <td>$@item.Price</td>
            <td>@item.Quantity</td>
            <td>$@(item.Price * item.Quantity)</td>
            <td>
                <button class="btn btn-danger" @onclick="() => RemoveFromCart(item.Id)">Remove</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<p><strong>Total Price: $@totalPrice</strong></p>

<button class="btn btn-warning" @onclick="ClearCart">Clear Cart</button>

@code {
    private List<CartItem> cartItems = new();
    private double totalPrice;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            cartItems = await http.GetFromJsonAsync<List<CartItem>>("/api/cart");
            totalPrice = cartItems.Sum(item => item.Price * item.Quantity);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching cart items: {ex.Message}");
        }
    }

    private async Task RemoveFromCart(long cartId)
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            await http.DeleteAsync($"/api/cart/{cartId}");
            await LoadCart(); // Reload the cart
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing item: {ex.Message}");
        }
    }

    private async Task ClearCart()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            await http.DeleteAsync("/api/cart/clear");
            await LoadCart(); // Reload the cart
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing cart: {ex.Message}");
        }
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public int Quantity { get; set; }
    }
}