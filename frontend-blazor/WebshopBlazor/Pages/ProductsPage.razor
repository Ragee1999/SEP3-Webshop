@page "/products"

<PageTitle>Our Products</PageTitle>

<div class="container my-5">
    <h2 class="text-center mb-4">Our Featured Products</h2>

    <div class="row">
        @if (products.Count > 0)
        {
            @foreach (var product in products)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="rounded-top bg-light text-center" style="height: 200px;">
                            <!-- Make the image clickable to navigate to SpecificProduct page -->
                            <img @onclick="() => NavigateToProduct(product.Id)" src="@product.Image" class="card-img-top img-fluid" alt="@product.Name" style="height: 100%; object-fit: contain;" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center text-dark">@product.Name</h5>
                            <h6 class="text-success text-center">$@product.Price</h6>
                        </div>
                        <div class="card-footer text-center">
                            <button class="btn btn-primary" @onclick="() => AddToCart(product)">
                                Add to Cart
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No products available at the moment. Please check back later.</p>
            </div>
        }
    </div>
</div>

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@code {
    private List<Product> products = new();
    private List<CartItem> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCartItems();
    }

    private async Task LoadProducts()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            var allProducts = await http.GetFromJsonAsync<List<Product>>("/products");

            // Debug each product
            Console.WriteLine("Fetched products:");
            foreach (var product in allProducts)
            {
                Console.WriteLine($"Product: {product.Name}, Image: {product.Image}");
            }

            // Filter products with valid image URLs
            products = allProducts?.Where(p => !string.IsNullOrWhiteSpace(p.Image)).ToList() ?? new List<Product>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task LoadCartItems()
    {
        var storedCart = await LocalStorage.GetItemAsync<List<CartItem>>("cartItems");
        cartItems = storedCart ?? new List<CartItem>();
    }

    private async Task AddToCart(Product product)
    {
        Console.WriteLine($"Adding product {product.Id} to cart.");

        // Check if product already exists in the cart
        var existingItem = cartItems.FirstOrDefault(item => item.Id == product.Id);
        if (existingItem != null)
        {
            // Increment quantity
            existingItem.Quantity++;
        }
        else
        {
            // Add new item to cart
            cartItems.Add(new CartItem
            {
                Id = product.Id,
                Name = product.Name,
                Price = (decimal)product.Price,
                Quantity = 1
            });
        }

        // Save updated cart to local storage
        await LocalStorage.SetItemAsync("cartItems", cartItems);
    }

    private void NavigateToProduct(long productId)
    {
        NavigationManager.NavigateTo($"/SpecificProduct/{productId}");
    }

    public class Product
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public double Price { get; set; }
    }

    public class CartItem
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
