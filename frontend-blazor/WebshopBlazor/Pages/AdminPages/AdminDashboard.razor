@page "/admin/dashboard"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.SignalR.Client

<style>
    body {
        background-color: #f8f9fa; /* Light gray background */
    }

    .sidebar {
        background-color: #343a40; /* Dark gray background */
        color: #fff;
        min-height: 100vh;
        padding-top: 20px;
    }

    .sidebar a {
        color: #ddd;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        font-size: 16px;
    }

    .sidebar a:hover {
        background-color: #495057;
        color: #fff;
    }

    .dashboard-header {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
        color: #343a40;
    }

    .card {
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 20px;
        font-size: 18px;
        font-weight: bold;
        background-color: #fff;
    }

    .card h5 {
        margin-bottom: 10px;
        font-size: 22px;
    }
</style>

<h3>Admin Dashboard</h3>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-2 sidebar">
            <div class="text-center fs-4 py-2 border-bottom">Admin Dashboard</div>
            <a href="/admin/orders"><i class="bi bi-cart"></i> Orders</a>
            <a href="/admin/products"><i class="bi bi-box"></i> Products</a>
            <a href="/admin/messages"><i class="bi bi-envelope"></i> Messages</a>
        </nav>

        <!-- Main Content -->
        <main class="col-md-10">
            @if (!IsLoading)
            {
                <div class="dashboard-header">Dashboard Overview</div>
                <div class="row g-4 px-4">
                    <div class="col-md-3">
                        <div class="card">
                            <h5>Total Revenue</h5>
                            <p>@TotalRevenue.ToString("N2") kr</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card">
                            <h5>Completed Orders</h5>
                            <p>@CompletedOrdersCount</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card">
                            <h5>Messages</h5>
                            <p>@MessagesCount</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading dashboard data...</p>
                </div>
            }
        </main>
    </div>
</div>

@code {
    private double TotalRevenue = 0.0;
    private int CompletedOrdersCount = 0;
    private int MessagesCount = 0;
    private HubConnection? hubConnection;
    private bool IsLoading = true;
    private bool isAdminLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        isAdminLoggedIn = await LocalStorage.GetItemAsync<bool>("isAdminLoggedIn");

        // Redirect to login if not logged in
        if (!isAdminLoggedIn)
        {
            NavigationManager.NavigateTo("/admin");
            return; // Prevent further execution of the page
        }

        try
        {
            // Start the SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7237/paymenthub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<List<PaymentDetails>>("ReceivePaymentDetails", (payments) =>
            {
                TotalRevenue = payments.Sum(p => p.AmountPaid);
                CompletedOrdersCount = payments.Count;
                IsLoading = false; // Data loaded and hide loading spinner
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("FetchStripeData");

            // Fetch messages count
            var response = await Http.GetAsync("http://localhost:8080/api/contact/stats");
            if (response.IsSuccessStatusCode)
            {
                var stats = await response.Content.ReadFromJsonAsync<Dictionary<string, int>>();
                MessagesCount = stats.GetValueOrDefault("totalMessages", 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            IsLoading = false; // Ensure spinner is hidden even on errors
            StateHasChanged();
        }
    }

    private class PaymentDetails
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public double AmountPaid { get; set; }
    }
}
