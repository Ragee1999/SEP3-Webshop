@page "/admin/messages/"
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<style>
    body {
        background-color: #f8f9fa; /* Light gray background */
    }
    .sidebar {
        background-color: #343a40; /* Dark gray background */
        color: #fff;
        min-height: 100vh;
        padding-top: 20px;
    }
    .sidebar a {
        color: #ddd;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        font-size: 16px;
    }
    .sidebar a:hover {
        background-color: #495057;
        color: #fff;
    }
    .dashboard-header {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
        color: #343a40;
    }
    .card {
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 20px;
        font-size: 18px;
        font-weight: bold;
        background-color: #fff;
    }
    .card h5 {
        margin-bottom: 10px;
        font-size: 22px;
    }

    .stats {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .stat-box {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
        text-align: center;
    }

    .order-item {
        margin-bottom: 15px;
    }

    .order-header {
        width: 100%;
        text-align: left;
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .message-details {
        padding: 10px;
        border-left: 2px solid #007bff;
        background-color: #fefefe;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-2 sidebar">
            <div class="text-center fs-4 py-2 border-bottom">Admin Dashboard</div>
            <a href="admin/dashboard"><i class="bi bi-cart"></i> Dashboard</a>
            <a href="admin/orders"><i class="bi bi-cart"></i> Orders</a>
            <a href="admin/products"><i class="bi bi-box"></i> Products</a>
        </nav>

        <!-- Main Content -->
        <main class="col-md-10">
            <div class="dashboard-header">Messages Overview</div>
            <div class="row g-4 px-4 my-5">
                <div class="col-md-4">
                    <div class="card">
                        <div class="icon"><i class="bi bi-currency-dollar"></i></div>
                        <h5>Waiting Messages</h5>
                        <p>@waitingMessages</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="icon"><i class="bi bi-clock"></i></div>
                        <h5>Total Messages</h5>
                        <p>@totalMessages</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="icon"><i class="bi bi-cart4"></i></div>
                        <h5>Messages This Month</h5>
                        <p>@messagesThisMonth</p>
                    </div>
                </div>
            </div>
            <div class="order-list">
                @foreach (var message in messages)
                {
                    <div class="order-item">
                        <button class="order-header" @onclick="() => ToggleOrderDetails(message.Id)">
                            Name: @message.Name : Date: @message.CreatedAt.ToString("dd.MM.yyyy")
                        </button>
                        @if (ExpandedOrders.Contains(message.Id))
                        {
                            <div class="message-details">
                                <p><strong>Name: @message.Name</strong></p>
                                <p><strong>Email: @message.Email</strong></p>
                                <p>Message: @message.Message</p>
                                <p>Date: @message.CreatedAt.ToString("dd.MM.yyyy")</p>

                                @if (!message.IsAnswered)
                                {
                                    <textarea @bind="replyText" placeholder="Type your reply..."></textarea>
                                    <button class="btn btn-primary mt-2" @onclick="() => AddReply(message.Id)">Send Reply</button>
                                }
                                @if (!string.IsNullOrEmpty(message.Reply))
                                {
                                    <p><strong>Reply:</strong> @message.Reply</p>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </main>
    </div>
</div>

@code
{
    private List<int> ExpandedOrders = new List<int>();
    private HttpClient http = new HttpClient();
    private bool isAdminLoggedIn = false;
    private List<ContactMessage> messages = new List<ContactMessage>();
    private int waitingMessages = 0;
    private int totalMessages = 0;
    private int messagesThisMonth = 0;
    private string replyText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isAdminLoggedIn = await localStorage.GetItemAsync<bool>("isAdminLoggedIn");

        // Redirect to login if not logged in
        if (!isAdminLoggedIn)
        {
            NavigationManager.NavigateTo("/admin");
            return; // Prevent further execution of the page
        }

        try
        {
            http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            messages = await http.GetFromJsonAsync<List<ContactMessage>>("/api/contact");

            // Fetch statistics
            var stats = await http.GetFromJsonAsync<Dictionary<string, int>>("/api/contact/stats");
            waitingMessages = stats["waitingMessages"];
            totalMessages = stats["totalMessages"];
            messagesThisMonth = stats["messagesThisMonth"];
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
    }

    private async Task AddReply(int messageId)
    {
        var response = await http.PostAsJsonAsync($"/api/contact/reply/{messageId}", replyText);
        if (response.IsSuccessStatusCode)
        {
            var updatedMessage = await response.Content.ReadFromJsonAsync<ContactMessage>();
            var message = messages.First(m => m.Id == messageId);
            message.Reply = updatedMessage.Reply;
            replyText = string.Empty;
        }
        else
        {
            Console.WriteLine($"Error sending reply: {response.ReasonPhrase}");
        }
    }

    private void ToggleOrderDetails(int messageId)
    {
        if (ExpandedOrders.Contains(messageId))
        {
            ExpandedOrders.Remove(messageId);
        }
        else
        {
            ExpandedOrders.Add(messageId);
        }
    }

    public class ContactMessage
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Message { get; set; }
        public string Name { get; set; }
        public bool IsAnswered { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Reply { get; set; }
    }
}
