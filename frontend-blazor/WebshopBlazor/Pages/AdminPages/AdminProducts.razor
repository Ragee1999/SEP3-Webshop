@page "/admin/products"
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .add-product-form, .product-details {
        margin-bottom: 20px;
    }

    .product-list {
        margin-top: 20px;
    }

    .product-header {
        width: 100%;
        text-align: left;
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .product-details {
        padding: 10px;
        border-left: 2px solid #007bff;
        background-color: #fefefe;
    }

    textarea, input {
        width: 100%;
        margin-bottom: 10px;
        padding: 5px;
    }

    body {
        background-color: #f8f9fa; /* Light gray background */
    }

    .sidebar {
        background-color: #343a40; /* Dark gray background */
        color: #fff;
        min-height: 100vh;
        padding-top: 20px;
    }

    .sidebar a {
        color: #ddd;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        font-size: 16px;
    }

    .sidebar a:hover {
        background-color: #495057;
        color: #fff;
    }

    .dashboard-header {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
        color: #343a40;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-2 sidebar">
            <div class="text-center fs-4 py-2 border-bottom">Admin Dashboard</div>
            <a href="/admin/dashboard"><i class="bi bi-house"></i> Dashboard</a>
            <a href="/admin/orders"><i class="bi bi-cart"></i> Orders</a>
            <a href="/admin/messages"><i class="bi bi-envelope"></i> Messages</a>
        </nav>

        <!-- Main Content -->
        <main class="col-md-10">
            <h4>Add Product</h4>
            <div class="add-product-form">
                <label>Name:</label>
                <input type="text" @bind="newProduct.Name" />

                <label>Description:</label>
                <textarea @bind="newProduct.Description"></textarea>

                <label>Price:</label>
                <input type="number" step="0.01" @bind="newProduct.Price" />

                <label>Stock Quantity:</label>
                <input type="number" @bind="newProduct.StockQuantity" />

                <label>Image URL:</label>
                <input type="text" placeholder="Image URL" @bind="newProduct.Image" />

                <button @onclick="() => AddProduct()">Add Product</button>
            </div>

            <h4>Existing Products</h4>
            <div class="product-list">
                @foreach (var product in products)
                {
                <div class="product-item">
                    <button class="product-header" @onclick="() => ToggleExpandButton(product.Id)">
                        @product.Name (ID: @product.Id)
                    </button>
                    @if (expandedProducts.Contains(product.Id))
                    {
                    <div class="product-details">
                        <p><strong>Description:</strong> @product.Description</p>
                        <p><strong>Price:</strong> @product.Price.ToString("C")</p>
                        <p><strong>Stock Quantity:</strong> @product.StockQuantity</p>
                        <p><strong>Image:</strong> @product.Image</p>

                        <!-- Edit Product -->
                        <h5>Edit Product</h5>
                        <label>Description:</label>
                        <textarea @bind="product.Description"></textarea>

                        <label>Price:</label>
                        <input type="number" step="0.01" @bind="product.Price" />

                        <label>Stock Quantity:</label>
                        <input type="number" @bind="product.StockQuantity" />

                        <label>Image URL:</label>
                        <textarea @bind="product.Image"></textarea>

                        <!-- Update Button -->
                        <button class="btn btn-primary mt-2" @onclick="() => UpdateProductAsync(product)">Update Product</button>

                        <!-- Remove Button -->
                        <button class="btn btn-danger mt-2" @onclick="() => RemoveProductAsync(product.Id)">Remove Product</button>
                    </div>
                    }
                </div>
                }
            </div>
        </main>
    </div>
</div>

@code {
    HttpClient http;
    private List<Product> products = new List<Product>();
    private List<int> expandedProducts = new List<int>();
    private Product newProduct = new Product();

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in
        var isAdminLoggedIn = await LocalStorage.GetItemAsync<bool>("isAdminLoggedIn");
        if (!isAdminLoggedIn)
        {
            // Redirect to the login page if not authorized
            NavigationManager.NavigateTo("/admin");
            return; // Prevent further execution of the page
        }

        try
        {
            http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
            products = await http.GetFromJsonAsync<List<Product>>("/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task AddProduct()
    {
        if (!string.IsNullOrWhiteSpace(newProduct.Name) && newProduct.Price > 0 && newProduct.StockQuantity >= 0)
        {
            try
            {
                var response = await http.PostAsJsonAsync("/products", newProduct);

                if (response.IsSuccessStatusCode)
                {
                    products = await http.GetFromJsonAsync<List<Product>>("/products");
                    newProduct = new Product();
                }
                else
                {
                    Console.WriteLine($"Error adding product: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception while adding product: {ex.Message}");
            }
        }
    }

    private void ToggleExpandButton(int id)
    {
        if (expandedProducts.Contains(id))
        {
            expandedProducts.Remove(id);
        }
        else
        {
            expandedProducts.Add(id);
        }
    }

    private async Task UpdateProductAsync(Product product)
    {
        try
        {
            var response = await http.PutAsJsonAsync($"/products/{product.Id}", product);
            if (response.IsSuccessStatusCode)
            {
                products = await http.GetFromJsonAsync<List<Product>>("/products");
                await jsRuntime.InvokeVoidAsync("alert", "Product updated successfully!"); // Success alert
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Failed to update product. Please try again."); // Failure alert
            }
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}"); // Error alert
        }
    }

    private async Task RemoveProductAsync(int productId)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this product?");
        if (confirmed)
        {
            try
            {
                var response = await http.DeleteAsync($"/products/{productId}");
                if (response.IsSuccessStatusCode)
                {
                    products.Remove(products.First(p => p.Id == productId));
                }
                else
                {
                    Console.WriteLine($"Error removing product: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception while removing product: {ex.Message}");
            }
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int StockQuantity { get; set; }
        public string Image { get; set; }
    }
}
