@page "/admin/products"
@inject IJSRuntime jsRuntime

<style>
    .add-product-form, .product-details {
        margin-bottom: 20px;
    }

    .product-list {
        margin-top: 20px;
    }

    .product-header {
        width: 100%;
        text-align: left;
        padding: 10px;
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .product-details {
        padding: 10px;
        border-left: 2px solid #007bff;
        background-color: #fefefe;
    }

    textarea, input {
        width: 100%;
        margin-bottom: 10px;
        padding: 5px;
    }
    body {
        background-color: #f8f9fa; /* Light gray background */
    }
    .sidebar {
        background-color: #343a40; /* Dark gray background */
        color: #fff;
        min-height: 100vh;
        padding-top: 20px;
    }
    .sidebar a {
        color: #ddd;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        font-size: 16px;
    }
    .sidebar a:hover {
        background-color: #495057;
        color: #fff;
    }
    .dashboard-header {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
        color: #343a40;
    }
    .card h5 {
        margin-bottom: 10px;
        font-size: 22px;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-2 sidebar">
            <div class="text-center fs-4 py-2 border-bottom">Admin Dashboard</div>
            <a href="admin/dashboard"><i class="bi bi-cart"></i> Dashboard</a>
            <a href="admin/orders"><i class="bi bi-cart"></i> Orders</a>
            <a href="admin/products"><i class="bi bi-box"></i> Products</a>
            <a href="admin/customers"><i class="bi bi-people"></i> Customers</a>
            <a href="admin/messages"><i class="bi bi-envelope"></i> Messages</a>
            <a href="admin/reviews"><i class="bi bi-star"></i> Reviews</a>
        </nav>

        <main class="col-md-10">
            <div class="dashboard-header">Products Overview</div>

            <!-- Tilføj produkt form -->
            <h4>Tilføj Produkt</h4>
            <div class="add-product-form">
                <label>Navn:</label>
                <input type="text" @bind="newProduct.Name" />

                <label>Beskrivelse:</label>
                <textarea @bind="newProduct.Description"></textarea>

                <label>Pris:</label>
                <input type="number" step="0.01" @bind="newProduct.Price" />

                <label>Antal:</label>
                <input type="number" @bind="newProduct.StockQuantity" />

                <label>Billeder:</label>
                <input type="text" placeholder="Billede URL" bind="@newProduct.Image" />

                <button @onclick="() => AddProduct()">Tilføj Produkt</button>
            </div>

            <hr />

            <!-- Liste af produkter -->
            <h4>Eksisterende Produkter</h4>
            <div class="product-list">
                @foreach (var product in products)
                {
                <div class="product-item">
                    <button class="product-header" @onclick="() => ToggleExpandbutton(product.Id)">
                        @product.Name (ID: @product.Id)
                    </button>
                    @if (expandedproducts.Contains(product.Id))
                    {
                    <div class="product-details">
                        <p><strong>Beskrivelse:</strong> @product.Description</p>
                        <p><strong>Pris:</strong> @product.Price.ToString("C")</p>
                        <p><strong>Antal:</strong> @product.StockQuantity</p>
                        <p><strong>Billede:</strong> @product.Image</p>

                        <!-- Redigering af produkt -->
                        <h5>Rediger Produkt</h5>
                        <label>Beskrivelse:</label>
                        <textarea @bind="product.Description"></textarea>

                        <label>Pris:</label>
                        <input type="number" step="0.01" @bind="product.Price" />

                        <label>Antal:</label>
                        <input type="number" @bind="product.StockQuantity" />

                        <label>Billede:</label>
                        <textarea @bind="product.Image"></textarea>

                        <!-- Update Button -->
                        <button class="btn btn-primary mt-2" @onclick="() => UpdateProductAsync(product)">Opdater Produkt</button>

                        <!-- Remove Button -->
                        <button class="btn btn-danger mt-2" @onclick="() => RemoveProductAsync(product.Id)">Fjern Produkt</button>

                    </div>
                    }
                </div>
                }
            </div>
        </main>
    </div>
</div>




@code {
    HttpClient http;
    private List<Product> products = new List<Product>();
    private List<int> expandedproducts = new List<int>();
    private Product newProduct = new Product
    {
    };

    protected override async Task OnInitializedAsync()
    {
        http = new HttpClient { BaseAddress = new Uri("http://localhost:8080") };
        products = await http.GetFromJsonAsync<List<Product>>("/products");
    }

    private async Task AddProduct()
    {

        // Validate the other fields
        if (!string.IsNullOrWhiteSpace(newProduct.Name) && newProduct.Price > 0 && newProduct.StockQuantity >= 0)
        {
            if (string.IsNullOrWhiteSpace(newProduct.Image))
            {
                newProduct.Image = "default-placeholder-image.jpg"; // Default image if none is provided
            }

            try
            {
                // Send the new product request to the backend
                var response = await http.PostAsJsonAsync("/products", newProduct);

                if (response.IsSuccessStatusCode)
                {
                    // Refresh the product list after adding the new product
                    products = await http.GetFromJsonAsync<List<Product>>("/products");
                    newProduct = new Product(); // Clear the form
                }
                else
                {
                    Console.WriteLine($"Error adding product: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception while adding product: {ex.Message}");
            }
        }
    }




    private void ToggleExpandbutton(int id)
    {
        if (expandedproducts.Contains(id))
        {
            expandedproducts.Remove(id);
        }
        else
        {
            expandedproducts.Add(id);
        }
    }

   
    

    private async Task UpdateProductAsync(Product product)
    {
        try
        {
            var response = await http.PutAsJsonAsync($"/products/{product.Id}", product);
            if (response.IsSuccessStatusCode)
            {
                products = await http.GetFromJsonAsync<List<Product>>("/products");
            }
            else
            {
                Console.WriteLine($"Error updating product: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while updating product: {ex.Message}");
        }
    }

    private async Task RemoveProductAsync(int productId)
    {
        // Show a confirmation dialog
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil fjerne dette produkt?");
        if (confirmed)
        {
            try
            {
                var response = await http.DeleteAsync($"/products/{productId}");
                if (response.IsSuccessStatusCode)
                {
                    // Remove the product locally to avoid another fetch
                    products.Remove(products.First(p => p.Id == productId));
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine($"Error removing product: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception while removing product: {ex.Message}");
            }
        }
    }


    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int StockQuantity { get; set; }
        public string Image { get; set; }
    }
}
