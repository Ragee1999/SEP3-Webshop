@page "/admin/orders"
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<style>
    body {
        background-color: #f8f9fa; /* Light gray background */
    }

    .sidebar {
        background-color: #343a40; /* Dark gray background */
        color: #fff;
        min-height: 100vh;
        padding-top: 20px;
    }

    .sidebar a {
        color: #ddd;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        font-size: 16px;
    }

    .sidebar a:hover {
        background-color: #495057;
        color: #fff;
    }

    .dashboard-header {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
        color: #343a40;
    }

    .card {
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 20px;
        font-size: 18px;
        font-weight: bold;
        background-color: #fff;
    }

    .card h5 {
        margin-bottom: 10px;
        font-size: 22px;
    }
</style>

<h3 class="text-center my-4">Orders Overview</h3>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-2 sidebar">
            <div class="text-center fs-4 py-2 border-bottom">Admin Dashboard</div>
            <a href="/admin/dashboard"><i class="bi bi-cart"></i> Dashboard</a>
            <a href="/admin/products"><i class="bi bi-box"></i> Products</a>
            <a href="/admin/messages"><i class="bi bi-envelope"></i> Messages</a>
        </nav>

        <!-- Main Content -->
        <main class="col-md-10">
            @if (!IsLoading)
            {
                @if (Orders.Count == 0)
                {
                    <p class="text-muted text-center">No orders available.</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer Name</th>
                                    <th>Email</th>
                                    <th>Amount Paid</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in Orders)
                                {
                                    <tr>
                                        <td>@order.Id</td>
                                        <td>@order.Email</td>
                                        <td>@order.AmountPaid.ToString("N2") kr.</td>
                                        <td>
                                            <button class="btn btn-info btn-sm" @onclick="() => ToggleOrderDetails(order.Id)">
                                                View Details
                                            </button>
                                        </td>
                                    </tr>
                                    @if (ExpandedOrders.Contains(order.Id))
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="p-3 border rounded bg-light">
                                                    <h5>Order Details</h5>
                                                    <p><strong>Order ID:</strong> @order.Id</p>
                                                    <p><strong>Customer Name:</strong> @order.CustomerName</p>
                                                    <p><strong>Email:</strong> @order.Email</p>
                                                    <p><strong>Address:</strong> @order.Address</p>
                                                    

                                                    @if (order.Items != null && order.Items.Count > 0)
                                                    {
                                                        <p><strong>Products:</strong></p>
                                                        <ul>
                                                            @foreach (var item in order.Items)
                                                            {
                                                                <li>
                                                                    @item.Name - @item.Quantity x @item.Price.ToString("N2") kr. = 
                                                                    <strong>@((item.Quantity * item.Price).ToString("N2")) kr.</strong>
                                                                </li>
                                                            }
                                                        </ul>
                                                        <p><strong>Amount Paid:</strong> @order.AmountPaid.ToString("N2") kr.</p>
                                                    }
                                                    else
                                                    {
                                                        <p>No products available.</p>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
            else
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading orders...</p>
                </div>
            }
        </main>
    </div>
</div>

@code {
    private List<Order> Orders = new List<Order>();
    private HashSet<string> ExpandedOrders = new HashSet<string>();
    private bool IsLoading = true; // Indicates loading state
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in
        var isAdminLoggedIn = await LocalStorage.GetItemAsync<bool>("isAdminLoggedIn");
        if (!isAdminLoggedIn)
        {
            // Redirect to the login page if not authorized
            NavigationManager.NavigateTo("/admin");
            return; // Prevent further execution of the page
        }

        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7237/paymenthub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<List<Order>>("ReceivePaymentDetails", (orders) =>
            {
                Orders = orders;
                IsLoading = false; // Data is loaded
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("FetchStripeData");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            IsLoading = false; // Ensure loading spinner is hidden
        }
    }

    private void ToggleOrderDetails(string orderId)
    {
        if (ExpandedOrders.Contains(orderId))
            ExpandedOrders.Remove(orderId);
        else
            ExpandedOrders.Add(orderId);
    }

    private class Order
    {
        public string Id { get; set; }
        public string CustomerName { get; set; } // Add the customer's name
        public string Email { get; set; }
        public double AmountPaid { get; set; }
        public string Address { get; set; }
        public List<OrderItem> Items { get; set; } = new List<OrderItem>();

        public class OrderItem
        {
            public string Name { get; set; }
            public long Quantity { get; set; }
            public double Price { get; set; }
        }
    }
}
